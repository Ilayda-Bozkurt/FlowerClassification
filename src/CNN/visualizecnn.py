# -*- coding: utf-8 -*-
"""visualizeCNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EyI7cCuCJcR_fK2QR53HCRivgjD1rV4v
"""

import matplotlib.pyplot as plt
import torch
import torch.nn.functional as F

#It is used to visualize feature maps from different layers of the CNN model.
#Obtains intermediate activations originating from layer at layer_num.
def visualize_feature_maps(model, layer_num, input_image):
    layers = list(model.network.children())

    def hook_fn(module, input, output):
        feature_maps.append(output)

    feature_maps = []
    hook = layers[layer_num].register_forward_hook(hook_fn)


    model.eval()
    with torch.no_grad():
        _ = model(input_image)  # ileri geçiş

    hook.remove()
    return feature_maps[0]


#Visualizes feature maps frame by frame.
def plot_feature_maps(feature_map, num_cols=8):
    num_features = feature_map.size(1)
    num_rows = (num_features + num_cols - 1) // num_cols

    fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, 15))
    axes = axes.ravel()

    for i in range(num_features):
        ax = axes[i]
        ax.imshow(feature_map[0, i].cpu().detach().numpy(), cmap='viridis')
        ax.axis('off')


    for j in range(i + 1, len(axes)):
        axes[j].axis('off')

    plt.tight_layout()
    plt.show()


for images, labels in train_dl:
    input_image = images[0].unsqueeze(0).to(device)  # [1, C, H, W]
    break


#Draw feature maps (1st, 3rd and 5th conv layers)
flower_cnn.eval()  #put the model in evaluation mode
feature_map1 = visualize_feature_maps(flower_cnn, 0, input_image)  # 1. Conv
plot_feature_maps(feature_map1)

feature_map3 = visualize_feature_maps(flower_cnn, 2, input_image)  # 3. Conv
plot_feature_maps(feature_map3)

feature_map5 = visualize_feature_maps(flower_cnn, 4, input_image)  # 5. Conv
plot_feature_maps(feature_map5)