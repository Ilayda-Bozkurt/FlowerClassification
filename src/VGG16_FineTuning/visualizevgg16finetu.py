# -*- coding: utf-8 -*-
"""visualizeVGG16FineTu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DyUQLGALy0h6FQK2J4ESafAlkFb4pIur
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Model

# Selecting Layers to Visualize
layer_names = ['block1_conv1', 'block3_conv1', 'block5_conv3']


# Getting the Base Model
base_model = model_finetuned.layers[1] # data_aug katmanÄ±ndan sonra base_model gelir

# Creating a Model to Create Feature Maps
feature_model = Model(inputs=base_model.input,
                      outputs=[base_model.get_layer(name).output for name in layer_names])

# Preparation of the Test Image
img = X_test[0]
img_input = np.expand_dims(img, axis=0)

# Visualization of Feature Maps
def visualize_feature_maps(model, img_input, layer_names):
    feature_maps = model.predict(img_input)

    for fmap, name in zip(feature_maps, layer_names):
        num_filters = fmap.shape[-1]
        size = fmap.shape[1]
        square = int(np.ceil(np.sqrt(num_filters)))

        fig, axes = plt.subplots(square, square, figsize=(12, 12))
        fig.suptitle(f'Feature Maps from {name}', fontsize=16)

        for i in range(square * square):
            ax = axes.flat[i]
            if i < num_filters:
                ax.imshow(fmap[0, :, :, i], cmap='viridis')
            ax.axis('off')

        plt.tight_layout()
        plt.show()


# Calling the Function
feature_map1 = visualize_feature_maps(feature_model, img_input, layer_names)