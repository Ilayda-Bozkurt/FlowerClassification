# -*- coding: utf-8 -*-
"""VGG16FineTumodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13J8mnoonXhfrifnC_rEUEJ1WE7eeHA9b
"""

#Allows defining the input type to be used in the model
input_shape = (224, 224)
IMG_SIZE = input_shape + (3,)

def my_model_finetuned():
    # Loading VGG16 Model Trained with ImageNet
    base_model = tf.keras.applications.VGG16(input_shape=IMG_SIZE,
                                             include_top=False,
                                             weights='imagenet')

    # Freezing the First Convolution Block
    for layer in base_model.layers:
        if 'block1' in layer.name:
            layer.trainable = False


    # Printed to check which layers are frozen.
    print("Dondurma işleminden sonra eğitilebilir katmanlar:")
    for layer in base_model.layers:
        print(f"{layer.name}: {layer.trainable}")

    # Adding Custom Layers
    model = tf.keras.Sequential([
        data_aug,  # Veri artırma katmanı
        base_model,
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dropout(0.5),  # Aşırı öğrenmeyi engellemek için dropout
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dense(32, activation='relu'),
        tf.keras.layers.Dense(5, activation='softmax')  # 5 sınıf için çıktı
    ])

    # Compiling the Model
    model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),
        loss=tf.keras.losses.SparseCategoricalCrossentropy(),
        metrics=['accuracy']
    )

    return model